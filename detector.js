// Generated by CoffeeScript 1.3.3
(function() {
  var Detector, capitalizeString, mergeObjects;

  capitalizeString = function(str) {
    return str.replace(/\b[a-z]/g, function(match) {
      return match.toUpperCase();
    });
  };

  mergeObjects = function(def, object) {
    var key, value;
    if (typeof object === 'undefined') {
      return def;
    } else if (typeof def === 'undefined') {
      return object;
    }
    for (key in object) {
      value = object[key];
      if (value !== null && value.constructor === Object) {
        def[key] = mergeObjects(def[key], value);
      } else {
        def[key] = value;
      }
    }
    return def;
  };

  Detector = (function() {

    function Detector(options) {
      this.options = Detector.options;
      mergeObjects(this.options, options);
      if (this.options.identify.browser) {
        this.identify('browser', Detector.browsersList);
      }
      if (this.options.identify.engine) {
        this.identify('engine', Detector.engineList);
      }
      if (this.options.identify.os) {
        this.identify('os', Detector.osList);
      }
    }

    Detector.prototype.identify = function(internalVar, list) {
      var alreadyGotMatch, htmlClass, item, key, matched, property, propertyLookup, versionLookup, _results;
      this[internalVar] = {};
      alreadyGotMatch = false;
      _results = [];
      for (key in list) {
        item = list[key];
        property = item.property;
        propertyLookup = item.propertyLookup;
        htmlClass = item.htmlClass != null ? item.htmlClass : key;
        versionLookup = item.versionLookup;
        matched = false;
        if (!alreadyGotMatch) {
          try {
            if (typeof propertyLookup === 'function') {
              matched = propertyLookup.call(item);
            } else {
              matched = property.indexOf(propertyLookup) > -1;
            }
            if (matched && !!versionLookup) {
              this.identifyVersion(internalVar, versionLookup);
            }
          } catch (ex) {
            matched = false;
          }
        }
        this[internalVar]['is' + capitalizeString(key)] = matched;
        if (matched) {
          alreadyGotMatch = true;
          if (this.options.addClass) {
            _results.push(this.addClassToHtml(htmlClass));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Detector.prototype.identifyVersion = function(internalVar, versionLookup) {
      var index, searcheable;
      searcheable = navigator.userAgent.indexOf(versionLookup) > -1 ? navigator.userAgent : navigator.appVersion;
      index = searcheable.indexOf(versionLookup);
      if (index > -1) {
        this[internalVar]['version'] = parseInt(searcheable.substring(index + versionLookup.length + 1));
        if (this.options.addClass) {
          return this.addClassToHtml("" + internalVar + "-v" + this[internalVar]["version"]);
        }
      } else {
        return this[internalVar]['version'] = null;
      }
    };

    Detector.prototype.addClassToHtml = function(classname) {
      if (!!classname) {
        return document.documentElement.className += " " + classname;
      }
    };

    return Detector;

  })();

  Detector.options = {
    addClass: true,
    identify: {
      browser: true,
      engine: true,
      os: true
    }
  };

  Detector.browsersList = {
    chrome: {
      property: navigator.userAgent,
      propertyLookup: 'Chrome',
      versionLookup: 'Chrome'
    },
    safari: {
      property: navigator.vendor,
      propertyLookup: 'Apple',
      versionLookup: 'Version'
    },
    opera: {
      property: window.opera,
      propertyLookup: function() {
        return !!this.property;
      },
      versionLookup: 'Opera'
    },
    konqueror: {
      property: navigator.vendor,
      propertyLookup: 'KDE',
      versionLookup: 'Konqueror'
    },
    firefox: {
      property: navigator.userAgent,
      propertyLookup: 'Firefox',
      versionLookup: 'Firefox'
    },
    ie: {
      property: navigator.userAgent,
      propertyLookup: 'MSIE',
      versionLookup: 'MSIE'
    },
    mozilla: {
      property: navigator.userAgent,
      propertyLookup: 'Gecko',
      versionLookup: 'rv'
    },
    netscape: {
      property: navigator.userAgent,
      propertyLookup: 'Mozilla',
      versionLookup: 'Mozilla'
    }
  };

  Detector.osList = {
    winCE: {
      property: navigator.appVersion,
      propertyLookup: 'Windows CE',
      htmlClass: 'mobile winCE'
    },
    iphone: {
      property: navigator.userAgent,
      propertyLookup: 'iPhone',
      htmlClass: 'mobile iphone ios'
    },
    ipod: {
      property: navigator.userAgent,
      propertyLookup: 'iPod',
      htmlClass: 'mobile ipod ios'
    },
    ipad: {
      property: navigator.userAgent,
      propertyLookup: 'iPad',
      htmlClass: 'mobile ipad ios'
    },
    android: {
      property: navigator.userAgent,
      propertyLookup: 'Android',
      htmlClass: 'mobile android'
    },
    winMobile: {
      property: navigator.userAgent,
      propertyLookup: 'IEMobile',
      htmlClass: 'mobile wp'
    },
    blackberry: {
      property: navigator.userAgent,
      propertyLookup: 'Blackberry',
      htmlClass: 'mobile blackberry'
    },
    win: {
      property: navigator.platform,
      propertyLookup: function() {
        return this.property.indexOf('Win') === 0;
      }
    },
    mac: {
      property: navigator.platform,
      propertyLookup: function() {
        return this.property.indexOf('Mac') === 0;
      }
    },
    linux: {
      property: navigator.platform,
      propertyLookup: function() {
        return (this.property === 'X11') || (this.property.indexOf('Linux') === 0);
      }
    },
    wii: {
      property: navigator.userAgent,
      propertyLookup: 'Wii',
      htmlClass: 'vg wii'
    },
    playstation: {
      property: navigator.userAgent,
      propertyLookup: function() {
        return /playstation/i.test(this.property);
      },
      htmlClass: 'vg playstation'
    }
  };

  Detector.engineList = {
    webkit: {
      property: navigator.userAgent,
      propertyLookup: 'AppleWebKit'
    },
    trident: {
      property: navigator.userAgent,
      propertyLookup: 'Trident'
    },
    khtml: {
      property: navigator.userAgent,
      propertyLookup: function() {
        return this.property.indexOf('KHTML') > -1 || this.property.indexOf('Konqueror') > -1;
      }
    },
    gecko: {
      property: navigator.userAgent,
      propertyLookup: 'Gecko'
    },
    opera: {
      property: window.opera,
      propertyLookup: function() {
        return !!this.property;
      }
    }
  };

  this.Detector = Detector;

}).call(this);
